package ${packageName}.domain;

#foreach ($import in $subImportList)
import ${import};
#end
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import com.xueyi.common.core.annotation.Excel;
import com.xueyi.common.core.web.domain.BaseEntity;

/**
 * ${subTable.functionName}对象 ${subTableName}
 * 
 * @author ${author}
 */
public class ${subClassName} extends BaseEntity {

    private static final long serialVersionUID = 1L;

#foreach ($column in $subTable.columns)
#set($conceal = true)
#foreach($item in $excisionEntity)
#if($column.javaField == $item)
#set($conceal = false)
#break
#end
#end
#set($AttrName = $column.javaField)
#foreach($item in $replaceParams.entrySet())
#if($column.javaField == $item.key)
#set($AttrName = $item.value)
#break
#end
#end
#if($conceal)
#if(!$table.isSuperColumn($column.javaField))
    /** $column.columnComment */
#if($column.list)
#set($parentheseIndex=$column.columnComment.indexOf("（"))
#if($parentheseIndex != -1)
#set($comment=$column.columnComment.substring(0, $parentheseIndex))
#else
#set($comment=$column.columnComment)
#end
#if($parentheseIndex != -1)
    @Excel(name = "${comment}", readConverterExp = "$column.readConverterExp()")
#elseif($column.javaType == 'Date')
    @JsonFormat(pattern = "yyyy-MM-dd")
    @Excel(name = "${comment}", width = 30, dateFormat = "yyyy-MM-dd")
#else
    @Excel(name = "${comment}")
#end
#end
    private $column.javaType $AttrName;

#end
#end
#end
#foreach ($column in $subTable.columns)
#set($conceal = true)
#foreach($item in $excisionEntity)
#if($column.javaField == $item)
#set($conceal = false)
#break
#end
#end
#if($table.tree)
#foreach($item in $excisionTreeEntity)
#if($column.javaField == $item)
#set($conceal = false)
#break
#end
#end
#end
#set($AttrName = $column.javaField)
#foreach($item in $replaceParams.entrySet())
#if($column.javaField == $item.key)
#set($AttrName = $item.value)
#break
#end
#end
#if($conceal)
#if($AttrName.length() > 2 && $AttrName.substring(1,2).matches("[A-Z]"))
#set($field=$AttrName)
#else
#set($field=$AttrName.substring(0,1).toUpperCase() + ${AttrName.substring(1)})
#end
    public void set${field}($column.javaType $AttrName) {
        this.$AttrName = $AttrName;
    }

    public $column.javaType get${field}() {
        return $AttrName;
    }

#end
#end
    @Override
    public String toString() {
        return new ToStringBuilder(this,ToStringStyle.MULTI_LINE_STYLE)
#foreach ($column in $subTable.columns)
#set($conceal = true)
#foreach($item in $excisionEntity)
#if($column.javaField != $pkColumn.javaField && $column.javaField == $item)
#set($conceal = false)
#break
#end
#end
#if($table.tree)
#foreach($item in $excisionTreeEntity)
#if($column.javaField == $item)
#set($conceal = false)
#break
#end
#end
#end
#foreach($item in $concealExcisionEntity)
#if($column.javaField == $item)
#set($conceal = true)
#break
#end
#end
#set($AttrName = $column.javaField)
#foreach($item in $replaceParams.entrySet())
#if($column.javaField == $item.key)
#set($AttrName = $item.value)
#break
#end
#end
#if($conceal)
#if($AttrName == 'createBy')
            .append("createBy", getCreateBy())
            .append("createName", getCreateName())
#elseif($AttrName == 'updateBy')
            .append("updateBy", getUpdateBy())
            .append("updateName", getUpdateName())
#else
#if($AttrName.length() > 2 && $AttrName.substring(1,2).matches("[A-Z]"))
#set($field=$AttrName)
#else
#set($field=$AttrName.substring(0,1).toUpperCase() + ${AttrName.substring(1)})
#end
            .append("${AttrName}", get${field}())
#end
#end
#end
            .toString();
    }
}