package ${packageName}.service.impl;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import com.baomidou.dynamic.datasource.annotation.DS;
import org.springframework.stereotype.Service;
#if($table.sub)
import com.xueyi.common.datascope.annotation.DataScope;
import org.springframework.transaction.annotation.Transactional;
#end
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.domain.${ClassName};
import ${packageName}.service.I${ClassName}Service;
#set($system=0)
#set($site=0)
#set($library=0)
#foreach ($column in $columns)
    #if($column.javaField == 'systemId')
        #set($system=1)
    #elseif($column.javaField == 'siteId')
        #set($site=1)
    #elseif($column.javaField == 'libraryId')
        #set($library=1)
    #end
#end
#set($method='')
#if($system==1 && $site == 0 && $library == 0)
    #set($method='S')
#elseif($system==0 && $site == 1 && $library == 0)
    #set($method='W')
#elseif($system==0 && $site == 0 && $library == 1)
    #set($method='L')
#elseif($system==1 && $site == 1 && $library == 0)
    #set($method='SW')
#elseif($system==0 && $site == 1 && $library == 1)
    #set($method='WL')
#elseif($system==1 && $site == 1 && $library == 1)
    #set($method='SWL')
#end

/**
 * ${functionName} 业务层处理
 * 
 * @author ${author}
 */
@Service
@DS("#isolate")
public class ${ClassName}ServiceImpl implements I${ClassName}Service {

    @Autowired
    private ${ClassName}Mapper ${className}Mapper;

    /**
     * 查询${functionName}列表
     *
     * @param ${className} ${functionName}
     * @return ${functionName}
     */
    @Override
    public List<${ClassName}> select${ClassName}List(${ClassName} ${className})
    {
        return ${className}Mapper.select${ClassName}List(${className});
    }
#if($table.tree)

    /**
     * 查询${functionName}树选项列表
     *
     * @param ${className} ${functionName}
     * @return ${functionName}
     */
    @Override
    public List<${ClassName}> select${ClassName}Tree(${ClassName} ${className})
    {
        return ${className}Mapper.select${ClassName}Tree(${className});
    }
#end

    /**
     * 查询${functionName}
     * 
     * @param ${className} ${functionName} | ${pkColumn.javaField} ${functionName}Id
     * @return ${functionName}
     */
    @Override
    public ${ClassName} select${ClassName}ById(${ClassName} ${className})
    {
        return ${className}Mapper.select${ClassName}ById(${className});
    }

    /**
     * 新增${functionName}
     * 
     * @param ${className} ${functionName}
     * @return 结果
     */
    @Override
#if($table.sub)
    @Transactional
    @DataScope(#if($method != '') ${method}ueAlias = "empty" )#else ueAlias = "empty" )#end

#end
    public int insert${ClassName}(${ClassName} ${className})
    {
#if($table.sub)
        int rows = ${className}Mapper.insert${ClassName}(${className});
        if (${className}.getSubList().size() > 0)
        {
#set($AttrName=$pkColumn.javaField.substring(0,1).toUpperCase() + ${pkColumn.javaField.substring(1)})
#if(!$pkColumn.increment)
            /**获取生成雪花Id，并赋值给主键，加入至子表对应外键中*/
            ${className}.set${AttrName}(${className}.getId());
#end
            ${className}Mapper.batch${subClassName}(${className});
        }
        return rows;
#elseif($table.tree)
#set($AttrName=$pkColumn.javaField.substring(0,1).toUpperCase() + ${pkColumn.javaField.substring(1)})
#foreach($column in $columns)
#if($column.javaField == 'ancestors')
        if(!${className}.getParentId().equals(0L)){
            ${ClassName} search = new ${ClassName}();
            search.set${AttrName}(${className}.getParentId());
            ${ClassName} newParent = ${className}Mapper.select${ClassName}ById(search);
            ${className}.setAncestors(newParent.getAncestors()+","+newParent.get${AttrName}());
        }else{
            ${className}.setAncestors("0");
        }
        return ${className}Mapper.insert${ClassName}(${className});
#end
#end
#else
        return ${className}Mapper.insert${ClassName}(${className});
#end
    }

    /**
     * 修改${functionName}
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
    @Override
#if($table.sub)
    @Transactional
#end
    public int update${ClassName}(${ClassName} ${className})
    {
#if($table.sub)
        ${className}Mapper.delete${subClassName}By${AttrName}(${className});
        if (${className}.getSubList().size() > 0)
        {
            ${className}Mapper.batch${subClassName}(${className});
        }
#elseif($table.tree)
#foreach($column in $columns)
#if($column.javaField == 'ancestors')
        ${ClassName} search = new ${ClassName}();
        search.set${AttrName}(${className}.get${AttrName}());
        ${ClassName} old${ClassName} = ${className}Mapper.select${ClassName}ById(search);
        if(!old${ClassName}.getParentId().equals(${className}.getParentId())){
            String newAncestors, oldAncestors;
            if(old${ClassName}.getParentId().equals(0L)){
                oldAncestors = "0";
            }else{
                search.set${AttrName}(old${ClassName}.getParentId());
                ${ClassName} oldParent = ${className}Mapper.select${ClassName}ById(search);
                oldAncestors = oldParent.getAncestors()+","+oldParent.get${AttrName}();
            }
            if(${className}.getParentId().equals(0L)){
                newAncestors = "0";
            }else{
                search.set${AttrName}(${className}.getParentId());
                ${ClassName} newParent = ${className}Mapper.select${ClassName}ById(search);
                newAncestors = newParent.getAncestors()+","+newParent.get${AttrName}();
            }
            ${className}.setAncestors(newAncestors);
            update${ClassName}Children(${className}.get${AttrName}(), newAncestors, oldAncestors);
        }
#end
#end
#end
        return ${className}Mapper.update${ClassName}(${className});
    }

#if($table.crud || $table.sub)
#foreach ($column in $columns)
#if($column.javaField == 'sort')
    /**
     * 修改${functionName}排序
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
    @Override
    public int update${ClassName}Sort(${ClassName} ${className}){
        return ${className}Mapper.update${ClassName}Sort(${className});
    }

#end
#end
#end
    /**
     * 删除${functionName}信息
     *
     * @param ${className} ${functionName} | ${pkColumn.javaField} ${functionName}Id
     * @return 结果
     */
    @Override
#if($table.sub)
    @Transactional
#end
    public int delete${ClassName}ById(${ClassName} ${className})
    {
#if($table.tree)
#foreach($column in $columns)
#if($column.javaField == 'ancestors')
        ${className}Mapper.deleteChildrenById(${className});
#end
#end
#elseif($table.sub)
        ${className}Mapper.delete${subClassName}By${AttrName}(${className});
#end
        return ${className}Mapper.delete${ClassName}ById(${className});
    }
#if(!$table.tree)

    /**
     * 批量删除${functionName}
     * 
     * @param ${className} ${functionName} | params.Ids 需要删除的${functionName}Ids组
     * @return 结果
     */
    @Override
#if($table.sub)
    @Transactional
#end
    public int delete${ClassName}ByIds(${ClassName} ${className})
    {
#if($table.sub)
        ${className}Mapper.delete${subClassName}By${AttrName}s(${className});
#end
        return ${className}Mapper.delete${ClassName}ByIds(${className});
    }
#end
#if($table.tree)
#foreach($column in $columns)
#if($column.javaField == 'ancestors')
    /**
    * 修改子元素关系
    *
    * @param ${pkColumn.javaField}      被修改的${functionName}Id
    * @param newAncestors               新的父Id集合
    * @param oldAncestors               旧的父Id集合
    */
    public void update${ClassName}Children(Long ${pkColumn.javaField}, String newAncestors, String oldAncestors) {
        ${ClassName} searchChild = new ${ClassName}();
        searchChild.set${AttrName}(${pkColumn.javaField});
        List<${ClassName}> children = ${className}Mapper.selectChildrenById(searchChild);
        if (children.size() > 0) {
            for (${ClassName} child : children) {
                child.setAncestors(child.getAncestors().replaceFirst(oldAncestors, newAncestors));
            }
            searchChild.set${AttrName}(null);
            searchChild.getParams().put("children", children);
            ${className}Mapper.updateChildrenAncestors(searchChild);
        }
    }
#end
#end
#end
}