package ${packageName}.service.impl;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
#if($table.sub)
import java.util.ArrayList;
import com.xueyi.common.core.utils.StringUtils;
import com.xueyi.common.datascope.annotation.DataScope;
import org.springframework.transaction.annotation.Transactional;
import ${packageName}.domain.${subClassName};
#end
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.domain.${ClassName};
import ${packageName}.service.I${ClassName}Service;

/**
 * ${functionName} 业务层处理
 * 
 * @author ${author}
 */
@Service
public class ${ClassName}ServiceImpl implements I${ClassName}Service 
{
    @Autowired
    private ${ClassName}Mapper ${className}Mapper;

    /**
     * 查询${functionName}
     * 
     * @param ${className} ${functionName}
     * @return ${functionName}
     */
    @Override
    public ${ClassName} select${ClassName}ById(${ClassName} ${className})
    {
        return ${className}Mapper.select${ClassName}ById(${className});
    }

    /**
     * 查询${functionName}列表
     * 
     * @param ${className} ${functionName}
     * @return ${functionName}
     */
    @Override
    public List<${ClassName}> select${ClassName}List(${ClassName} ${className})
    {
        return ${className}Mapper.select${ClassName}List(${className});
    }

    /**
     * 新增${functionName}
     * 
     * @param ${className} ${functionName}
     * @return 结果
     */
    @Override
#if($table.sub)
    @Transactional
    @DataScope(ueAlias = "empty")
#end
    public int insert${ClassName}(${ClassName} ${className})
    {
#if($table.sub)
        int rows = ${className}Mapper.insert${ClassName}(${className});
        if (${className}.${subClassName}.size() > 0)
        {
            #set($AttrName=$pkColumn.javaField.substring(0,1).toUpperCase() + ${pkColumn.javaField.substring(1)})
            //获取生成雪花Id，并赋值给主键，加入至子表对应外键中
            ${className}.set${pkColumn.javaField}(${className}.getId())
            ${className}Mapper.batch${subClassName}(${className});
        }
        return rows;
#else
        return ${className}Mapper.insert${ClassName}(${className});
#end
    }

    /**
     * 修改${functionName}
     * 
     * @param ${className} ${functionName}
     * @return 结果
     */
#if($table.sub)
    @Transactional
#end
    @Override
    public int update${ClassName}(${ClassName} ${className})
    {
#if($table.sub)
        ${className}Mapper.delete${subClassName}By${pkColumn.javaField}(${className});
        if (${className}.${subClassName}.size() > 0)
        {
            ${className}Mapper.batch${subClassName}(${className});
        }
#end
        return ${className}Mapper.update${ClassName}(${className});
    }

    /**
     * 批量删除${functionName}
     * 
     * @param ${className} ${functionName}
     * @return 结果
     */
#if($table.sub)
    @Transactional
#end
    @Override
    public int delete${ClassName}ByIds(${ClassName} ${className})
    {
#if($table.sub)
        ${className}Mapper.delete${subClassName}By${pkColumn.javaField}s(${className});
#end
        return ${className}Mapper.delete${ClassName}ByIds(${className});
    }

    /**
     * 删除${functionName}信息
     * 
     * @param ${className} ${functionName}
     * @return 结果
     */
    @Override
    public int delete${ClassName}ById(${ClassName} ${className})
    {
#if($table.sub)
        ${className}Mapper.delete${subClassName}By${pkColumn.javaField}(${className});
#end
        return ${className}Mapper.delete${ClassName}ById(${className});
    }
}
