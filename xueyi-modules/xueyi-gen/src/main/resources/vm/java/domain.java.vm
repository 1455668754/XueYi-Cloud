package ${packageName}.domain;

#foreach ($import in $importList)
import ${import};
#end
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import com.xueyi.common.core.annotation.Excel;
#if($table.crud || $table.sub)
#if($table.sub)
import ${packageName}.domain.${subClassName};
#end
import com.xueyi.common.core.web.domain.BaseEntity;
#elseif($table.tree)
import com.xueyi.common.core.web.domain.TreeEntity;
#end

/**
 * ${functionName}对象 ${tableName}
 *
 * @author ${author}
 */
#if($table.crud || $table.sub)
#set($Entity="BaseEntity")
#elseif($table.tree)
#set($Entity="TreeEntity")
#end
public class ${ClassName} extends ${Entity} {

    private static final long serialVersionUID = 1L;

#foreach ($column in $columns)
#set($conceal = true)
#foreach($item in $excisionEntity)
#if($column.javaField == $item)
#set($conceal = false)
#break
#end
#end
#if($table.tree)
#foreach($item in $excisionTreeEntity)
#if($column.javaField == $item)
#set($conceal = false)
#break
#end
#end
#end
#if($conceal)
#if(!$table.isSuperColumn($column.javaField))
    /** $column.columnComment */
#if($column.list)
#set($parentheseIndex=$column.columnComment.indexOf("（"))
#if($parentheseIndex != -1)
#set($comment=$column.columnComment.substring(0, $parentheseIndex))
#else
#set($comment=$column.columnComment)
#end
#if($parentheseIndex != -1)
    @Excel(name = "${comment}", readConverterExp = "$column.readConverterExp()")
#elseif($column.javaType == 'Date')
    @JsonFormat(pattern = "yyyy-MM-dd")
    @Excel(name = "${comment}", width = 30, dateFormat = "yyyy-MM-dd")
#else
    @Excel(name = "${comment}")
#end
#end
    private $column.javaType $column.javaField;

#end
#end
#end
#if($table.sub)
    /** $table.subTable.functionName信息 */
    private List<${subClassName}> subList;

#end
#foreach ($column in $columns)
#set($conceal = true)
#foreach($item in $excisionEntity)
#if($column.javaField == $item)
#set($conceal = false)
#break
#end
#end
#if($table.tree)
#foreach($item in $excisionTreeEntity)
#if($column.javaField == $item)
#set($conceal = false)
#break
#end
#end
#end
#if($conceal)
#if($column.javaField.length() > 2 && $column.javaField.substring(1,2).matches("[A-Z]"))
#set($AttrName=$column.javaField)
#else
#set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
#end
    public void set${AttrName}($column.javaType $column.javaField) {
        this.$column.javaField = $column.javaField;
    }

    public $column.javaType get${AttrName}() {
        return $column.javaField;
    }

#end
#end
#if($table.sub)
    public List<${subClassName}> getSubList()
    {
        return subList;
    }

    public void setSubList(List<${subClassName}> subList)
    {
        this.subList = subList;
    }

#end
    @Override
    public String toString() {
        return new ToStringBuilder(this,ToStringStyle.MULTI_LINE_STYLE)
#foreach ($column in $columns)
#set($conceal = true)
#foreach($item in $excisionEntity)
#if($column.javaField != $pkColumn.javaField && $column.javaField == $item)
#set($conceal = false)
#break
#end
#end
#if($table.tree)
#foreach($item in $excisionTreeEntity)
#if($column.javaField == $item)
#set($conceal = false)
#break
#end
#end
#end
#foreach($item in $concealExcisionEntity)
#if($column.javaField == $item)
#set($conceal = true)
#break
#end
#end
#if($conceal)
#if($column.javaField == 'createBy')
            .append("createBy", getCreateBy())
            .append("createName", getCreateName())
#elseif($column.javaField == 'updateBy')
            .append("updateBy", getUpdateBy())
            .append("updateName", getUpdateName())
#elseif($column.javaField == 'parentId' && $table.tree)
            .append("parentId", getParentId())
            .append("parentName", getParentName())
#else
#if($column.javaField.length() > 2 && $column.javaField.substring(1,2).matches("[A-Z]"))
#set($AttrName=$column.javaField)
#else
#set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
#end
            .append("${column.javaField}", get${AttrName}())
#end
#end
#end
#if($table.sub)
            .append("subList", getSubList())
#end
            .toString();
    }
}