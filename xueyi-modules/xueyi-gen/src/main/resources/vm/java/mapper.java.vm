package ${packageName}.mapper;

import java.util.List;
import com.xueyi.common.datascope.annotation.DataScope;
import ${packageName}.domain.${ClassName};
#set($AOP=[])
#foreach ($column in $columns)
#foreach ($item in $excisionAOP.entrySet())
#if($column.javaField == $item.key && $pkColumn.javaField != $item.key)
#set($conceal = $AOP.add($item.value))
#end
#end
#end

/**
 * ${functionName} 数据层
 *
 * @author ${author}
 */
public interface ${ClassName}Mapper {

    /**
     * 查询${functionName}列表
     * 访问控制 e 租户查询
     *
     * @param ${classNameNoPrefix} ${functionName}
     * @return ${functionName}集合
     */
    @DataScope( eAlias = "e"#foreach($item in $AOP), ${item}Alias = "e"#end )
    public List<${ClassName}> select${ClassNameNoPrefix}List(${ClassName} ${classNameNoPrefix});
#if($table.tree)

    /**
     * 查询${functionName}树选项列表
     * 访问控制 e 租户查询
     *
     * @param ${classNameNoPrefix} ${functionName}
     * @return ${functionName}集合
     */
    @DataScope( eAlias = "e"#foreach($item in $AOP), ${item}Alias = "e"#end )
    public List<${ClassName}> select${ClassNameNoPrefix}Tree(${ClassName} ${classNameNoPrefix});
#foreach($column in $columns)
#if($column.javaField == 'ancestors')

    /**
     * 根据Id查询${functionName}子集
     * 访问控制 e 租户查询
     *
     * @param ${classNameNoPrefix} ${functionName}
     * @return ${functionName}集合
     */
    @DataScope( eAlias = "e"#foreach($item in $AOP), ${item}Alias = "e"#end )
    public List<${ClassName}> selectChildrenBy${pkColumn.capJavaField}(${ClassName} ${classNameNoPrefix});
#end
#end
#end

    /**
     * 查询${functionName}
     * 访问控制 e 租户查询
     *
     * @param ${classNameNoPrefix} ${functionName} | ${pkColumn.javaField} ${functionName}Id
     * @return ${functionName}
     */
    @DataScope( eAlias = "e"#foreach($item in $AOP), ${item}Alias = "e"#end )
    public ${ClassName} select${ClassNameNoPrefix}By${pkColumn.capJavaField}(${ClassName} ${classNameNoPrefix});

    /**
     * 新增${functionName}
#if($table.sub)
    * 访问控制 empty 租户更新（无前缀）()控制方法在impl层 | ${ClassName}ServiceImpl)
#else
    * 访问控制 empty 租户更新（无前缀）
#end
     *
     * @param ${classNameNoPrefix} ${functionName}
     * @return 结果
     */
#if($table.sub)
#else
    @DataScope( ueAlias = "empty"#foreach($item in $AOP), u${item}Alias = "empty"#end )
#end
    public int insert${ClassNameNoPrefix}(${ClassName} ${classNameNoPrefix});

    /**
     * 修改${functionName}
     * 访问控制 empty 租户更新（无前缀）
     *
     * @param ${classNameNoPrefix} ${functionName}
     * @return 结果
     */
    @DataScope( ueAlias = "empty"#foreach($item in $AOP), u${item}Alias = "empty"#end )
    public int update${ClassNameNoPrefix}(${ClassName} ${classNameNoPrefix});
#if($table.tree)
#foreach($column in $columns)
#if($column.javaField == 'ancestors')

    /**
     * 修改${functionName}子集祖籍信息
     * 访问控制 empty 租户更新（无前缀）
     *
     * @param ${classNameNoPrefix} ${functionName} | List<${ClassName}> children
     * @return 结果
     */
    @DataScope( ueAlias = "empty"#foreach($item in $AOP), u${item}Alias = "empty"#end )
    public int updateChildrenAncestors(${ClassName} ${classNameNoPrefix});
#end
#end
#end
#if($table.crud || $table.sub)
#foreach ($column in $columns)
#if($column.javaField == 'sort')

    /**
     * 修改${functionName}排序
     * 访问控制 empty 租户更新（无前缀）
     *
     * @param ${classNameNoPrefix} ${functionName}
     * @return 结果
     */
    @DataScope( ueAlias = "empty"#foreach($item in $AOP), u${item}Alias = "empty"#end )
    public int update${ClassNameNoPrefix}Sort(${ClassName} ${classNameNoPrefix});

#end
#end
#end
    /**
     * 删除${functionName}
     * 访问控制 empty 租户更新（无前缀）
     *
     * @param ${classNameNoPrefix} ${functionName} | ${pkColumn.javaField} ${functionName}Id
     * @return 结果
     */
    @DataScope( ueAlias = "empty"#foreach($item in $AOP), u${item}Alias = "empty"#end )
    public int delete${ClassNameNoPrefix}By${pkColumn.capJavaField}(${ClassName} ${classNameNoPrefix});
#if(!$table.tree)

    /**
     * 批量删除${functionName}
     * 访问控制 empty 租户更新（无前缀）
     *
     * @param ${classNameNoPrefix} ${functionName} | params.Ids 需要删除的${functionName}Ids组
     * @return 结果
     */
    @DataScope( ueAlias = "empty"#foreach($item in $AOP), u${item}Alias = "empty"#end )
    public int delete${ClassNameNoPrefix}By${pkColumn.capJavaField}s(${ClassName} ${classNameNoPrefix});
#end
#if($table.tree)
#foreach($column in $columns)
#if($column.javaField == 'ancestors')

    /**
     * 根据Id删除${functionName}子集
     * 访问控制 empty 租户更新（无前缀）
     *
     * @param ${classNameNoPrefix} ${functionName}
     * @return 结果
     */
    @DataScope( ueAlias = "empty"#foreach($item in $AOP), u${item}Alias = "empty"#end )
    public int deleteChildrenBy${pkColumn.capJavaField}(${ClassName} ${classNameNoPrefix});
#end
#end
#elseif($table.sub)
#set($AttrName=$pkColumn.javaField.substring(0,1).toUpperCase() + ${pkColumn.javaField.substring(1)})

    /**
     * 批量新增${subTable.functionName}
     * 访问控制 empty 租户更新（无前缀）
     *
     * @param ${classNameNoPrefix} ${functionName}
     * @return 结果
     */
    @DataScope( ueAlias = "empty"#foreach($item in $AOP), u${item}Alias = "empty"#end )
    public int batch${subClassNameNoPrefix}(${ClassName} ${classNameNoPrefix});

    /**
     * 通过${functionName}Id删除${subTable.functionName}信息
     * 访问控制 empty 租户更新（无前缀）
     *
     * @param ${classNameNoPrefix} ${functionName}
     * @return 结果
     */
    @DataScope( ueAlias = "empty"#foreach($item in $AOP), u${item}Alias = "empty"#end )
    public int delete${subClassNameNoPrefix}By${AttrName}(${ClassName} ${classNameNoPrefix});

    /**
     * 批量删除${subTable.functionName}
     * 访问控制 empty 租户更新（无前缀）
     *
     * @param ${classNameNoPrefix} ${functionName}
     * @return 结果
     */
    @DataScope( ueAlias = "empty"#foreach($item in $AOP), u${item}Alias = "empty"#end )
    public int delete${subClassNameNoPrefix}By${AttrName}s(${ClassName} ${classNameNoPrefix});
#end
}