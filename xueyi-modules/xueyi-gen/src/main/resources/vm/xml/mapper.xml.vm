<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="${packageName}.mapper.${ClassName}Mapper">
    
    <resultMap type="${ClassName}" id="${classNameNoPrefix}Result">
#foreach ($column in $columns)
#set($conceal = true)
#foreach($item in $XMLExcisionEntity)
#if($column.javaField != $pkColumn.javaField && $column.javaField == $item)
#set($conceal = false)
#break
#end
#end
#set($AttrName = $column.javaField)
#foreach($item in $replaceParams.entrySet())
#if($column.javaField == $item.key)
#set($AttrName = $item.value)
#break
#end
#end
#if($conceal)
#if($column.javaField == ${pkColumn.javaField})
        <id     property="${AttrName}"#set($maxStep=23 - ${AttrName.length()})#foreach($step in[0..$maxStep]) #end column="${pkColumn.columnName}"#set($maxStep=23 - ${pkColumn.columnName.length()})#foreach($step in[0..$maxStep]) #end />
#elseif($column.javaField == 'createBy')
        <result property="createBy"                 column="create_by"                />
        <result property="createName"               column="create_name"              />
#elseif($column.javaField == 'updateBy')
        <result property="updateBy"                 column="update_by"                />
        <result property="updateName"               column="update_name"              />
#elseif($table.tree && $column.javaField == 'parentId')
        <result property="parentId"                 column="parent_id"                />
        <result property="parentName"               column="parent_name"              />
#else
        <result property="${AttrName}"#set($maxStep=23 - ${AttrName.length()})#foreach($step in[0..$maxStep]) #end column="${column.columnName}"#set($maxStep=23 - ${column.columnName.length()})#foreach($step in[0..$maxStep]) #end />
#end
#end
#end
#if($table.sub)
        <collection property="subList" notNullColumn="sub_${subTable.pkColumn.columnName}" javaType="java.util.List" resultMap="subResult" />
#end
    </resultMap>
#if($table.sub)

    <resultMap type="${subClassName}" id="subResult">
#foreach ($column in $subTable.columns)
#set($conceal = true)
#foreach($item in $XMLExcisionSubEntity)
#if($column.javaField != $pkColumn.javaField && $column.javaField == $item)
#set($conceal = false)
#break
#end
#end
#set($AttrName = $column.javaField)
#foreach($item in $replaceParams.entrySet())
#if($column.javaField == $item.key)
#set($AttrName = $item.value)
#break
#end
#end
#if($conceal)
#if($column.javaField == 'createBy')
        <result property="createBy"                 column="sub_create_by"                    />
        <result property="createName"   	        column="sub_create_name"                  />
#elseif($column.javaField == 'updateBy')
        <result property="updateBy"   		        column="sub_update_by"                    />
        <result property="updateName"   	        column="sub_update_name"                  />
#else
        <result property="${AttrName}"#set($maxStep=23 - ${AttrName.length()})#foreach($step in[0..$maxStep]) #end column="sub_${column.columnName}"#set($maxStep=27 - ${column.columnName.length()})#foreach($step in[0..$maxStep]) #end />
#end
#end
#end
    </resultMap>
#end

#if($table.tree)
#set($commaStep = 0)
    <sql id="selectVo">
        select #foreach($column in $columns)#set($conceal = true)#foreach($item in $XMLExcisionEntity)#if($column.javaField != $pkColumn.javaField && $column.javaField == $item)#set($conceal = false)#break#end#end#if($conceal)#if($commaStep == 0)e.$column.columnName#set($commaStep = 1)#else, e.$column.columnName#end#end#end

        from ${tableName} e
    </sql>

#set($treeStep=0)
    <sql id="treeVo">
        select#foreach($column in $columns)#set($conceal = true)#foreach($item in $XMLExcisionEntity)#if($column.javaField != $pkColumn.javaField && $column.javaField == $item)#set($conceal = false)#break#end#end#if($conceal)#if($column.columnName == 'parent_id' || $column.columnName == 'name')#set($treeStep = $treeStep + 1)#end#if($treeStep == 0) e.$column.columnName#set($treeStep = 1)#else, e.$column.columnName#end#end#end#if($treeStep == 2) pe.name as parent_name#end

        from ${tableName} e
        left join ${tableName} pe on pe.$pkColumn.columnName = e.$pkColumn.columnName
    </sql>
#else
    <sql id="selectVo">
#set($commaStep = 0)
#if($table.crud)
        select #foreach($column in $columns)#set($conceal = true)#foreach($item in $XMLExcisionEntity)#if($column.javaField != $pkColumn.javaField && $column.javaField == $item)#set($conceal = false)#break#end#end#if($conceal)#if($commaStep == 0)e.$column.columnName#set($commaStep = 1)#else, e.$column.columnName#end#end#end

        from ${tableName} e
#elseif($table.sub)
        select#foreach($column in $columns)#set($conceal = true)#foreach($item in $XMLExcisionEntity)#if($column.javaField != $pkColumn.javaField && $column.javaField == $item)#set($conceal = false)#break#end#end#if($conceal) e.$column.columnName,#end#end

               #foreach($column in $subTable.columns)#set($conceal = true)#foreach($item in $XMLExcisionSubEntity)#if($column.javaField != $pkColumn.javaField && $column.javaField == $item)#set($conceal = false)#break#end#end#if($conceal)#if($commaStep == 0)s.$column.columnName as sub_$column.columnName#set($commaStep = 1)#else, s.$column.columnName as sub_$column.columnName#end#end#end

        from ${tableName} e
        left join ${subTableName} s on s.${subTableFkName} = e.${pkColumn.columnName}
#end
    </sql>
#end

    <select id="select${ClassNameNoPrefix}List" parameterType="${ClassName}" resultMap="${classNameNoPrefix}Result">
#if($table.tree)
        <include refid="treeVo"/>
#else
        <include refid="selectVo"/>
#end
        where 1 = 1
#foreach($column in $columns)
#set($conceal = true)
#foreach($item in $XMLExcisionEntity)
#if($column.javaField != $pkColumn.javaField && $column.javaField == $item)
#set($conceal = false)
#break
#end
#end
#set($AttrName = $column.javaField)
#foreach($item in $replaceParams.entrySet())
#if($column.javaField == $item.key)
#set($AttrName = $item.value)
#break
#end
#end
#if($conceal)
#set($queryType=$column.queryType)
#set($javaField=$AttrName)
#set($javaType=$column.javaType)
#set($columnName=$column.columnName)
#set($AttrName=$AttrName.substring(0,1).toUpperCase() + ${AttrName.substring(1)})
#if($column.query)
#if($column.queryType == "EQ")
        <if test="$javaField != null #if($javaType == 'String' ) and $javaField.trim() != ''#end">#if($column.javaType == 'String')#set($maxStep=25 + 11 - ${javaField.length()} * 2)#else#set($maxStep=25 + 22 - ${javaField.length()})#end#foreach($step in[0..$maxStep]) #end and e.$columnName = #{$javaField} #set($maxStep=40 - ${columnName.length()} - ${javaField.length()})#foreach($step in[0..$maxStep]) #end </if>
#elseif($queryType == "NE")
        <if test="$javaField != null #if($javaType == 'String' ) and $javaField.trim() != ''#end">#if($column.javaType == 'String')#set($maxStep=25 + 11 - ${javaField.length()} * 2)#else#set($maxStep=25 + 22 - ${javaField.length()})#end#foreach($step in[0..$maxStep]) #end and e.$columnName != #{$javaField} #set($maxStep=41 - ${columnName.length()} - ${javaField.length()})#foreach($step in[0..$maxStep]) #end </if>
#elseif($queryType == "GT")
        <if test="$javaField != null #if($javaType == 'String' ) and $javaField.trim() != ''#end">#if($column.javaType == 'String')#set($maxStep=25 + 11 - ${javaField.length()} * 2)#else#set($maxStep=25 + 22 - ${javaField.length()})#end#foreach($step in[0..$maxStep]) #end and e.$columnName &gt; #{$javaField} #set($maxStep=40 - ${columnName.length()} - ${javaField.length()})#foreach($step in[0..$maxStep]) #end </if>
#elseif($queryType == "GTE")
        <if test="$javaField != null #if($javaType == 'String' ) and $javaField.trim() != ''#end">#if($column.javaType == 'String')#set($maxStep=25 + 11 - ${javaField.length()} * 2)#else#set($maxStep=25 + 22 - ${javaField.length()})#end#foreach($step in[0..$maxStep]) #end and e.$columnName &gt;= #{$javaField} #set($maxStep=41 - ${columnName.length()} - ${javaField.length()})#foreach($step in[0..$maxStep]) #end </if>
#elseif($queryType == "LT")
        <if test="$javaField != null #if($javaType == 'String' ) and $javaField.trim() != ''#end">#if($column.javaType == 'String')#set($maxStep=25 + 11 - ${javaField.length()} * 2)#else#set($maxStep=25 + 22 - ${javaField.length()})#end#foreach($step in[0..$maxStep]) #end and e.$columnName &lt; #{$javaField} #set($maxStep=40 - ${columnName.length()} - ${javaField.length()})#foreach($step in[0..$maxStep]) #end </if>
#elseif($queryType == "LTE")
        <if test="$javaField != null #if($javaType == 'String' ) and $javaField.trim() != ''#end">#if($column.javaType == 'String')#set($maxStep=25 + 11 - ${javaField.length()} * 2)#else#set($maxStep=25 + 22 - ${javaField.length()})#end#foreach($step in[0..$maxStep]) #end and e.$columnName &lt;= #{$javaField} #set($maxStep=41 - ${columnName.length()} - ${javaField.length()})#foreach($step in[0..$maxStep]) #end </if>
#elseif($queryType == "LIKE")
        <if test="$javaField != null #if($javaType == 'String' ) and $javaField.trim() != ''#end">#if($column.javaType == 'String')#set($maxStep=25 + 11 - ${javaField.length()} * 2)#else#set($maxStep=25 + 22 - ${javaField.length()})#end#foreach($step in[0..$maxStep]) #end and e.$columnName like concat('%', #{$javaField}, '%') #set($maxStep=18 - ${columnName.length()} - ${javaField.length()})#foreach($step in[0..$maxStep]) #end </if>
#elseif($queryType == "BETWEEN")
        <if test="params.begin$AttrName != null and params.begin$AttrName != '' and params.end$AttrName != null and params.end$AttrName != ''">#set($maxStep=10)#foreach($step in[0..$maxStep]) #end and e.$columnName between #{params.begin$AttrName} and #{params.end$AttrName}#set($maxStep=10)#foreach($step in[0..$maxStep]) #end </if>
#end
#end
#end
#end
        <!-- 数据范围过滤 -->
        ${params.dataScope}
#foreach($column in $columns)
#if($column.javaField == 'sort')
        order by e.sort
#end
#end
    </select>

#if($table.tree)
    <select id="select${ClassNameNoPrefix}Tree" parameterType="${ClassName}" resultMap="${classNameNoPrefix}Result">
        <include refid="selectVo"/>
        where 1 = 1
        #foreach($cu in $columns)#if($cu.columnName==${pkColumn.columnName})#set($javaField=$cu.javaField)#set($javaType=$cu.javaType)<if test="$javaField != null #if($javaType == 'String' ) and $javaField.trim() != ''#end">and e.${pkColumn.columnName} != #{${pkColumn.javaField}}#foreach ($column in $columns)#if($column.columnName == 'ancestors') and NOT find_in_set( #{${pkColumn.javaField}} , e.ancestors )#elseif($column.columnName == 'status') and e.status = 0#end#end</if> #end#end

        <!-- 数据范围过滤 -->
        ${params.dataScope}
    </select>

#foreach($column in $columns)
#if($column.javaField == 'ancestors')
    <select id="selectChildrenBy${pkColumn.capJavaField}" parameterType="${ClassName}" resultMap="${classNameNoPrefix}Result">
        <include refid="selectVo"/>
        where find_in_set( #{${pkColumn.javaField}} , e.ancestors )
        <!-- 数据范围过滤 -->
        ${params.dataScope}
    </select>
#end
#end

#end
    <select id="select${ClassNameNoPrefix}By${pkColumn.capJavaField}" parameterType="${ClassName}" resultMap="${classNameNoPrefix}Result">
        <include refid="selectVo"/>
        where e.${pkColumn.columnName} = #{${pkColumn.javaField}}
        <!-- 数据范围过滤 -->
        ${params.dataScope}
    </select>

    <insert id="insert${ClassNameNoPrefix}" parameterType="${ClassName}"#if($pkColumn.increment) useGeneratedKeys="true" keyProperty="$pkColumn.javaField"#end>
        insert into ${tableName}
        <trim prefix="(" suffix=")" suffixOverrides=",">
#foreach($column in $columns)
#set($conceal = true)
#foreach($item in $XMLConcealInsertEntity)
#if($column.javaField == $item)
#set($conceal = false)
#break
#end
#end
#set($AttrName = $column.javaField)
#foreach($item in $replaceParams.entrySet())
#if($column.javaField == $item.key)
#set($AttrName = $item.value)
#break
#end
#end
#if($conceal)
#if(!$pkColumn.increment && $column.columnName == $pkColumn.columnName)
            <if test="snowflakeId != null">                                                $column.columnName #set($maxStep=21 - ${column.columnName.length()})#foreach($step in[0..$maxStep]) #end ,</if>
#elseif($column.columnName != $pkColumn.columnName)
            <if test="$AttrName != null#if($column.javaType == 'String' && $column.required) and $AttrName != ''#end">#if($column.javaType == 'String' && $column.required)#set($maxStep=35 + 11 - ${AttrName.length()} * 2)#else#set($maxStep=35 + 22 - ${AttrName.length()})#end#foreach($step in[0..$maxStep]) #end $column.columnName #set($maxStep=21 - ${column.columnName.length()})#foreach($step in[0..$maxStep]) #end ,</if>
#end
#end
#end
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
#foreach($column in $columns)
#set($conceal = true)
#foreach($item in $XMLConcealInsertEntity)
#if($column.javaField == $item)
#set($conceal = false)
#break
#end
#end
#set($AttrName = $column.javaField)
#foreach($item in $replaceParams.entrySet())
#if($column.javaField == $item.key)
#set($AttrName = $item.value)
#break
#end
#end
#if($conceal)
#if(!$pkColumn.increment && $column.columnName == $pkColumn.columnName)
            <if test="snowflakeId != null">                                                #{snowflakeId}         ,</if>
#elseif($column.columnName != $pkColumn.columnName)
            <if test="$AttrName != null#if($column.javaType == 'String' && $column.required) and $AttrName != ''#end">#if($column.javaType == 'String' && $column.required)#set($maxStep=35 + 11 - ${AttrName.length()} * 2)#else#set($maxStep=35 + 22 - ${AttrName.length()})#end#foreach($step in[0..$maxStep]) #end #{$AttrName} #set($maxStep=18 - ${AttrName.length()})#foreach($step in[0..$maxStep]) #end ,</if>
#end
#end
#end
         </trim>
    </insert>

    <update id="update${ClassNameNoPrefix}" parameterType="${ClassName}">
        update ${tableName}
        <trim prefix="SET" suffixOverrides=",">
#foreach($column in $columns)
#set($conceal = true)
#foreach($item in $XMLConcealUpdateEntity)
#if($column.javaField == $item)
#set($conceal = false)
#break
#end
#end
#set($AttrName = $column.javaField)
#foreach($item in $replaceParams.entrySet())
#if($column.javaField == $item.key)
#set($AttrName = $item.value)
#break
#end
#end
#if($conceal)
#if($column.columnName != $pkColumn.columnName)
            <if test="$AttrName != null#if($column.javaType == 'String' && $column.required) and $AttrName != ''#end">#if($column.javaType == 'String' && $column.required)#set($maxStep=35 + 11 - ${AttrName.length()} * 2)#else#set($maxStep=35 + 22 - ${AttrName.length()})#end#foreach($step in[0..$maxStep]) #end $column.columnName = #{$AttrName} #set($maxStep=29 - ${column.columnName.length()} - ${AttrName.length()})#foreach($step in[0..$maxStep]) #end ,</if>
#end
#end
#end
        </trim>
        where ${pkColumn.columnName} = #{${pkColumn.javaField}}
        <!-- 数据范围过滤 -->
        ${params.updateScope}
    </update>

#if($table.crud || $table.sub)
#foreach ($co in $columns)
#if($co.javaField == 'sort')
    <update id="update${ClassNameNoPrefix}Sort" parameterType="${ClassName}">
        update ${tableName} set sort =
        <foreach collection="params.Ids" item="item" index="index" separator=" " open="case $pkColumn.columnName" close="end">
            when #{item.${pkColumn.javaField}} then #{item.sort}
        </foreach>
        where $pkColumn.columnName in
        <foreach collection="params.Ids" item="item" index="index" separator="," open="(" close=")">
            #{item.${pkColumn.javaField}}
        </foreach>
        <!-- 数据范围过滤 -->
        ${params.updateScope}
    </update>

#end
#end
#end
#if($table.tree)
#foreach($column in $columns)
#if($column.javaField == 'ancestors')
    <update id="updateChildrenAncestors" parameterType="${ClassName}">
        update ${tableName} set ancestors =
        <foreach collection="params.children" item="item" index="index"
                 separator=" " open="case ${pkColumn.columnName}" close="end">
            when #{item.${pkColumn.javaField}} then #{item.ancestors}
        </foreach>
        where ${pkColumn.columnName} in
        <foreach collection="params.children" item="item" index="index"
                 separator="," open="(" close=")">
            #{item.${pkColumn.javaField}}
        </foreach>
        <!-- 数据范围过滤 -->
        ${params.updateScope}
    </update>
#end
#end

#end
    <delete id="delete${ClassNameNoPrefix}By${pkColumn.capJavaField}" parameterType="${ClassName}">
        update ${tableName}
        set del_flag = 1
        where ${pkColumn.columnName} = #{${pkColumn.javaField}}
        <!-- 数据范围过滤 -->
        ${params.updateScope}
    </delete>
#if(!$table.tree)

    <delete id="delete${ClassNameNoPrefix}By${pkColumn.capJavaField}s" parameterType="${ClassName}">
        update ${tableName}
        set del_flag = 1
        where ${pkColumn.columnName} in
        <foreach item="${pkColumn.javaField}" collection="params.Ids" open="(" separator="," close=")">
            #{${pkColumn.javaField}}
        </foreach>
        <!-- 数据范围过滤 -->
        ${params.updateScope}
    </delete>
#end
#if($table.tree)
#foreach($column in $columns)
#if($column.javaField == 'ancestors')

    <delete id="deleteChildrenBy${pkColumn.capJavaField}" parameterType="${ClassName}">
        update ${tableName}
        set del_flag = 1
        where find_in_set( #{${pkColumn.javaField}} , ancestors )
        <!-- 数据范围过滤 -->
        ${params.updateScope}
    </delete>
#end
#end
#elseif($table.sub)
#set($AttrName=$pkColumn.javaField.substring(0,1).toUpperCase() + ${pkColumn.javaField.substring(1)})

    <delete id="delete${subClassNameNoPrefix}By${AttrName}s" parameterType="${ClassName}">
        delete from ${subTableName}
        where ${pkColumn.columnName} in
        <foreach item="${pkColumn.javaField}" collection="params.Ids" open="(" separator="," close=")">
            #{${pkColumn.javaField}}
        </foreach>
        <!-- 数据范围过滤 -->
        ${params.updateScope}
    </delete>

    <delete id="delete${subClassNameNoPrefix}By${AttrName}" parameterType="${ClassName}">
        delete from ${subTableName}
        where ${pkColumn.columnName} = #{${pkColumn.javaField}}
        <!-- 数据范围过滤 -->
        ${params.updateScope}
    </delete>

    <insert id="batch${subClassNameNoPrefix}" parameterType="${ClassName}">
        insert into ${subTableName}( #set($commaStep = 0)#foreach($column in $subTable.columns)#set($conceal = true)#foreach($item in $XMLConcealInsertEntity)#if($column.javaField != $pkColumn.javaField && $column.javaField == $item)#set($conceal = false)#break#end#end#if($conceal)#if($commaStep == 0)$column.columnName#set($commaStep = 1)#else, $column.columnName#end#end#end ) values
		<foreach item="item" index="index" collection="subList" separator=",">
            ( #set($commaStep = 0)#foreach($column in $subTable.columns)#set($AttrName = $column.javaField)#set($commaBatch = 0)#set($conceal = true)#foreach($item in $XMLConcealInsertEntity)#if($column.javaField != $pkColumn.javaField && $column.javaField == $item)#set($conceal = false)#break#end#end#foreach($item in $XMLConcealBatchEntity)#if($column.javaField == $pkColumn.javaField || $column.javaField == $item)#set($commaBatch = 1)#break#end#end#foreach($item in $replaceParams.entrySet())#if($column.javaField == $item.key)#set($AttrName = $item.value)#break#end#end#if($conceal)#if($commaStep == 0)#if($commaBatch == 0)#{item.$AttrName}#else#{$AttrName}#end#set($commaStep = 1)#else#if($commaBatch == 0), #{item.$AttrName}#else, #{$AttrName}#end#end#end#end )
        </foreach>
    </insert>
#end
</mapper>