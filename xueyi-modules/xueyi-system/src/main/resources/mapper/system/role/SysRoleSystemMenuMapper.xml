<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xueyi.system.role.mapper.SysRoleSystemMenuMapper">

    <resultMap type="SysRoleSystemMenu" id="SysRoleSystemMenuResult">
        <id     property="roleId"           column="role_id"            />
        <result property="systemMenuId"     column="system_menu_id"     />
    </resultMap>

    <sql id="permsVo">
        select distinct system_menu_id
        from (
                 select distinct rsm.system_menu_id
                 from sys_role_system_menu rsm
                          left join sys_role r on r.role_id = rsm.role_id
                          left join sys_organize_role sor on sor.role_id = rsm.role_id
                          left join sys_user u on u.dept_id = sor.derive_dept_id or u.post_id = sor.derive_post_id or
                                                  u.user_id = sor.derive_user_id or sor.derive_tenant_id is not null or
                                                  sor.derive_administrator_id is not null
                 where r.status = '0' and u.user_id = #{params.userId} and rsm.tenant_id = #{enterpriseId}
                   and (derive_tenant_id = #{enterpriseId} or derive_administrator_id = #{enterpriseId})
                 union all
                 select rsm.system_menu_id
                 from sys_role_system_menu rsm
                          left join sys_role r on r.role_id = rsm.role_id
                          left join sys_organize_role sor on sor.role_id = rsm.role_id
                          left join sys_user u
                                    on u.dept_id = sor.dept_id or u.post_id = sor.post_id or u.user_id = sor.user_id
                 where r.status = '0' and u.user_id = #{params.userId} and rsm.tenant_id = #{enterpriseId}
             ) as sm
        where system_menu_id in (
            select rsm.system_menu_id
            from sys_role_system_menu rsm
                     left join sys_role r on r.role_id = rsm.role_id
                     left join sys_organize_role sor on sor.role_id = rsm.role_id
                     left join sys_user u
                               on u.dept_id = sor.dept_id or u.post_id = sor.post_id or u.user_id = sor.user_id
            where r.status = '0' and u.user_id = #{params.userId} and rsm.tenant_id = #{enterpriseId}
        )
        group by system_menu_id
        having count(system_menu_id) = 1;
    </sql>

    <sql id="permitVo">
        select distinct rsm.system_menu_id
        from sys_role_system_menu rsm
        left join sys_organize_role sor on sor.role_id = rsm.role_id
    </sql>

    <sql id="permitPersonalScreenDeriveVo">
        select distinct system_menu_id
        from (
                 select distinct rsm.system_menu_id
                 from sys_role_system_menu rsm
                          left join sys_role r on r.role_id = rsm.role_id
                          left join sys_organize_role sor on sor.role_id = rsm.role_id
                          left join sys_user u on sor.derive_tenant_id is not null or sor.derive_administrator_id is not null
                 where r.status = '0' and u.user_id = #{params.userId} and rsm.tenant_id = #{enterpriseId}
                   and (derive_tenant_id = #{enterpriseId} or derive_administrator_id = #{enterpriseId})
                 union all
                 select rsm.system_menu_id
                 from sys_role_system_menu rsm
                          left join sys_role r on r.role_id = rsm.role_id
                          left join sys_organize_role sor on sor.role_id = rsm.role_id
                          left join sys_user u
                                    on u.dept_id = sor.dept_id or u.post_id = sor.post_id or u.user_id = sor.user_id
                 where r.status = '0' and u.user_id = #{params.userId} and rsm.tenant_id = #{enterpriseId}
             ) as sm
        where system_menu_id in (
            select rsm.system_menu_id
            from sys_role_system_menu rsm
                     left join sys_role r on r.role_id = rsm.role_id
                     left join sys_organize_role sor on sor.role_id = rsm.role_id
                     left join sys_user u
                               on u.dept_id = sor.dept_id or u.post_id = sor.post_id or u.user_id = sor.user_id
            where r.status = '0' and u.user_id = #{params.userId} and rsm.tenant_id = #{enterpriseId}
        )
        group by system_menu_id
        having count(system_menu_id) = 1;
    </sql>

    <sql id="selectVo">
        select rsm.role_id, rsm.system_menu_id
        from sys_role_system_menu rsm
    </sql>

    <sql id="countVo">
        select count(1)
        from sys_role_system_menu rsm
    </sql>

    <select id="selectSystemMenuListByUserId" parameterType="SysMenu" resultMap="SysRoleSystemMenuResult">
        <include refid="permsVo"/>
    </select>

    <select id="selectPermitAdministrator" parameterType="SysRoleSystemMenu" resultMap="SysRoleSystemMenuResult">
        <include refid="permitVo"/>
        where sor.derive_administrator_id = #{enterpriseId}
        <!-- 数据范围过滤 -->
        ${params.dataScope}
    </select>

    <select id="selectPermitEnterprise" parameterType="SysRoleSystemMenu" resultMap="SysRoleSystemMenuResult">
        <include refid="permitVo"/>
        where ( sor.derive_tenant_id = #{enterpriseId} or sor.derive_administrator_id = #{enterpriseId} )
        <!-- 数据范围过滤 -->
        ${params.dataScope}
    </select>

    <select id="selectPermitPersonalScreenDerive" parameterType="SysRoleSystemMenu" resultMap="SysRoleSystemMenuResult">
        <include refid="permitPersonalScreenDeriveVo"/>
    </select>

    <select id="selectPermitPersonal" parameterType="SysRoleSystemMenu" resultMap="SysRoleSystemMenuResult">
        <include refid="permsVo"/>
    </select>

    <select id="selectMenuScopeByIdExclude" parameterType="com.xueyi.system.api.utilTool.SysSearch" resultMap="SysRoleSystemMenuResult">
        <include refid="selectVo"/>
        where rsm.role_id = #{search.roleId}
        <if test="null != search.menus and search.menus.size > 0">
            and rsm.system_menu_id in
            <foreach collection="search.menus" index="index" item="item" open="(" separator="," close=")">
                #{item.menuId}
            </foreach>
            and rsm.system_menu_id not in
            <foreach collection="search.menus" index="index" item="item" open="(" separator="," close=")">
                #{item.systemId}
            </foreach>
        </if>
        <if test="null == search.menus or search.menus.size == 0">
            and 1 != 1
        </if>
        <!-- 数据范围过滤 -->
        ${params.dataScope}
    </select>

    <select id="checkSystemMenuExistRole" parameterType="com.xueyi.system.api.utilTool.SysSearch" resultType="java.lang.Integer">
        <include refid="countVo"/>
        where rsm.system_menu_id = #{search.systemMenuId}
        <!-- 数据范围过滤 -->
        ${params.dataScope}
    </select>

    <insert id="batchRoleSystemMenu" parameterType="com.xueyi.system.api.utilTool.SysSearch">
        insert into sys_role_system_menu (role_id, system_menu_id, tenant_id) values
        <foreach item="systemMenuId" collection="search.systemMenuIds" separator=",">
            (#{search.roleId}, #{systemMenuId}, #{enterpriseId})
        </foreach>
    </insert>

    <delete id="deleteRoleSystemMenuByRoleId" parameterType="com.xueyi.system.api.utilTool.SysSearch">
        delete from sys_role_system_menu
        where role_id = #{search.roleId}
        <!-- 数据范围过滤 -->
        ${params.updateScope}
    </delete>

    <delete id="deleteRoleSystemMenuBySystemMenuId" parameterType="com.xueyi.system.api.utilTool.SysSearch">
        delete from sys_role_system_menu
        where system_menu_id = #{search.systemMenuId}
        <!-- 数据范围过滤 -->
        ${params.updateScope}
    </delete>

    <delete id="deleteRoleSystemMenuByIds" parameterType="com.xueyi.system.api.utilTool.SysSearch">
        delete from sys_role_system_menu where role_id in
        <foreach item="roleId" collection="search.roleIds" open="(" separator="," close=")">
            #{roleId}
        </foreach>
        <!-- 数据范围过滤 -->
        ${params.updateScope}
    </delete>
</mapper>