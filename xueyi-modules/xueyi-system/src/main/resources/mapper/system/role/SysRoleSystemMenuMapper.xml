<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xueyi.system.role.mapper.SysRoleSystemMenuMapper">

    <resultMap type="SysRoleSystemMenu" id="SysRoleSystemMenuResult">
        <id     property="roleId"           column="role_id"            />
        <result property="systemMenuId"     column="system_menu_id"     />
    </resultMap>

    <sql id="selectPermsVo">
        select distinct rsm.system_menu_id
        from sys_role_system_menu rsm
                 left join sys_dept_role dr on dr.role_id = rsm.role_id
                 left join sys_post_role pr on pr.role_id = rsm.role_id
                 left join sys_user_role ur on ur.role_id = rsm.role_id
                 left join sys_user u on u.dept_id = dr.dept_id or u.post_id = pr.post_id or u.user_id = ur.user_id
                 left join sys_role r on r.role_id = dr.role_id or r.role_id = pr.role_id or r.role_id = ur.role_id
    </sql>

    <sql id="selectVo">
        select rsm.role_id, rsm.system_menu_id
        from sys_role_system_menu rsm
    </sql>

    <sql id="countVo">
        select count(1)
        from sys_role_system_menu rsm
    </sql>

    <select id="selectSystemMenuPermsList" parameterType="com.xueyi.system.api.utilTool.SysSearch" resultMap="SysRoleSystemMenuResult">
        <include refid="selectPermsVo"/>
        where u.user_id = #{search.userId}
        and r.status = 0 and r.tenant_id = #{enterpriseId}
        and u.status = 0 and u.tenant_id = #{enterpriseId}
    </select>

    <select id="selectSystemMenuList" parameterType="com.xueyi.system.api.utilTool.SysSearch" resultMap="SysRoleSystemMenuResult">
        <include refid="selectVo"/>
        where 1 = 1
        <if test="search.roleId != null">
            AND rsm.role_id = #{search.roleId}
        </if>
        <if test="search.systemMenuId != null">
            AND rsm.system_menu_id = #{search.systemMenuId}
        </if>
        <!-- 数据范围过滤 -->
        ${params.dataScope}
    </select>

    <select id="selectMenuScopeByIdExclude" parameterType="com.xueyi.system.api.utilTool.SysSearch" resultMap="SysRoleSystemMenuResult">
        <include refid="selectVo"/>
        where rsm.role_id = #{search.roleId} and rsm.system_menu_id in
        <foreach collection="search.menus" index="index" item="item" open="(" separator="," close=")">
            #{item.menuId}
        </foreach>
        and rsm.system_menu_id not in
        <foreach collection="search.menus" index="index" item="item" open="(" separator="," close=")">
            #{item.systemId}
        </foreach>
        <!-- 数据范围过滤 -->
        ${params.dataScope}
    </select>

    <select id="checkSystemMenuExistRole" parameterType="com.xueyi.system.api.utilTool.SysSearch" resultType="java.lang.Integer">
        <include refid="countVo"/>
        where rsm.system_menu_id = #{search.systemMenuId}
        <!-- 数据范围过滤 -->
        ${params.dataScope}
    </select>

    <insert id="batchRoleSystemMenu" parameterType="com.xueyi.system.api.utilTool.SysSearch">
        insert into sys_role_system_menu (role_id, system_menu_id, tenant_id) values
        <foreach item="systemMenuId" collection="search.systemMenuIds" separator=",">
            (#{search.roleId}, #{systemMenuId}, #{enterpriseId})
        </foreach>
    </insert>

    <delete id="deleteRoleSystemMenuByRoleId" parameterType="com.xueyi.system.api.utilTool.SysSearch">
        delete from sys_role_system_menu
        where role_id = #{search.roleId}
        <!-- 数据范围过滤 -->
        ${params.updateScope}
    </delete>

    <delete id="deleteRoleSystemMenuBySystemMenuId" parameterType="com.xueyi.system.api.utilTool.SysSearch">
        delete from sys_role_system_menu
        where system_menu_id = #{search.systemMenuId}
        <!-- 数据范围过滤 -->
        ${params.updateScope}
    </delete>

    <delete id="deleteRoleSystemMenuByIds" parameterType="com.xueyi.system.api.utilTool.SysSearch">
        delete from sys_role_system_menu where role_id in
        <foreach item="roleId" collection="search.roleIds" open="(" separator="," close=")">
            #{roleId}
        </foreach>
        <!-- 数据范围过滤 -->
        ${params.updateScope}
    </delete>
</mapper>