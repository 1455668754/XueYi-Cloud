<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xueyi.system.authority.mapper.SysRoleMapper">

	<resultMap type="SysRole" id="SysRoleResult">
		<id     property="roleId"             	column="role_id"               />
		<result property="roleCode"           	column="role_code"             />
		<result property="name"           		column="name"             	   />
		<result property="roleKey"            	column="role_key"              />
		<result property="dataScope"          	column="data_scope"            />
		<result property="type"   				column="type"   	 		   />
		<result property="deriveId"   			column="derive_id"   	 	   />
		<result property="sort"   				column="sort"   	 		   />
		<result property="status"     			column="status"      		   />
		<result property="createBy"   		    column="create_by"             />
		<result property="createName"   	    column="create_name"           />
		<result property="createTime" 		    column="create_time"           />
		<result property="updateBy"   	        column="update_by"             />
		<result property="updateName"           column="update_name"           />
		<result property="updateTime" 	        column="update_time"           />
		<result property="remark" 				column="remark" 	 		   />
	</resultMap>


	<!--  角色权限获取  -->
	<resultMap type="SysRole" id="RoleResult">
		<id     property="roleId"             	column="role_id"               />
		<result property="roleCode"           	column="role_code"             />
		<result property="name"           		column="name"             	   />
		<result property="roleKey"            	column="role_key"              />
		<result property="dataScope"          	column="data_scope"            />
		<result property="type"   				column="type"   	 		   />
		<result property="deriveId"   			column="derive_id"   	 	   />
		<result property="sort"   				column="sort"   	 		   />
		<result property="status"     			column="status"      		   />
		<result property="enterpriseId"     	column="tenant_id"             />
		<collection  property="wholeIds"        notNullColumn="s_m_whole_uid"       javaType="java.util.Set" resultMap="wholeIdsResult"       />
		<collection  property="halfIds"         notNullColumn="s_m_half_uid"        javaType="java.util.Set" resultMap="halfIdsResult"        />
		<collection  property="deptPostIds"     notNullColumn="s_m_dept_post_id"    javaType="java.util.Set" resultMap="deptPostIdsResult"    />
	</resultMap>

	<resultMap type="SystemMenu" id="wholeIdsResult">
		<id     property="Uid"              column="s_m_whole_uid"             />
	</resultMap>

	<resultMap type="SystemMenu" id="halfIdsResult">
		<id     property="Uid"              column="s_m_half_uid"              />
	</resultMap>

	<resultMap type="Long" id="deptPostIdsResult">
		<id                                 column="s_m_dept_post_id"          />
	</resultMap>

	<sql id="permVo">
		select distinct r.role_id, r.role_code, r.name, r.role_key, r.data_scope, r.status
		from sys_role r
				 left join sys_organize_role sor on sor.role_id = r.role_id
	</sql>

	<sql id="selectVo">
		select distinct r.role_id, r.role_code, r.name, r.role_key, r.data_scope, r.type, r.sort, r.status, r.create_by, r.create_time, r.update_by, r.update_time, r.remark
		from sys_role r
	</sql>

	<sql id="selectAllVo">
		select distinct r.role_id, r.role_code, r.name, r.role_key
		from sys_role r
	</sql>

	<sql id="checkVo">
		select distinct r.role_id, r.role_code, r.name, r.role_key, r.data_scope
		from sys_role r
	</sql>
	<sql id="scopeVo">
		select distinct r.role_id, r.data_scope
		from sys_role r
	</sql>

	<sql id="organizeVo">
		select distinct r.role_id
		from sys_organize_role r
	</sql>

	<sql id="roleAuthorityVo">
		select r.role_id, r.role_code, r.name, r.role_key, r.data_scope, r.type, r.derive_id, r.sort, r.status, r.del_flag, r.tenant_id,
			   r.s_m_half_uid, r.s_m_whole_uid, r.s_m_dept_post_id
		from (
				 select r.role_id, r.role_code, r.name, r.role_key, r.data_scope, r.type, r.derive_id, r.sort, r.status, r.del_flag, r.tenant_id,
						null as s_m_half_uid, srsmw.system_menu_id as s_m_whole_uid, null as s_m_dept_post_id
				 from sys_role r
						  left join sys_role_system_menu srsmw on r.role_id = srsmw.role_id and srsmw.checked = '0'
				 union
				 select r.role_id, r.role_code, r.name, r.role_key, r.data_scope, r.type, r.derive_id, r.sort, r.status, r.del_flag, r.tenant_id,
						srsmh.system_menu_id as s_m_half_uid, null as s_m_whole_uid, null as s_m_dept_post_id
				 from sys_role r
						  left join sys_role_system_menu srsmh on r.role_id = srsmh.role_id and srsmh.checked = '1'
				 union
				 select r.role_id, r.role_code, r.name, r.role_key, r.data_scope, r.type, r.derive_id, r.sort, r.status, r.del_flag, r.tenant_id,
						null as s_m_half_uid, null as s_m_whole_uid, srdp.dept_post_id as s_m_dept_post_id
				 from sys_role r
						  left join sys_role_dept_post srdp on r.role_id = srdp.role_id
			 ) r
				 left join sys_role sr on sr.role_id = r.role_id
	</sql>

	<select id="getRoleAuthorityByRoleId" resultMap="RoleResult">
		<include refid="roleAuthorityVo"/>
		WHERE r.tenant_id = #{enterpriseId} and r.del_flag = 0 and r.role_id = #{roleId}
	</select>

	<select id="getRoleAuthority" resultMap="RoleResult">
		<include refid="roleAuthorityVo"/>
		WHERE r.tenant_id = #{enterpriseId} and r.del_flag = 0 and r.role_id in
		<foreach item="roleId" collection="roleIds" open="(" separator="," close=")">
			#{roleId}
		</foreach>
	</select>

	<select id="getRoleListByUserId" resultMap="SysRoleResult">
		<include refid="organizeVo"/>
		left join sys_user u on u.user_id = r.user_id or u.user_id = r.derive_user_id
									or u.post_id = r.post_id or u.post_id = r.derive_post_id
									or u.dept_id = r.dept_id or u.dept_id = r.derive_dept_id
									or u.tenant_id = r.derive_enterprise_id or u.tenant_id = r.derive_tenant_id
		WHERE u.user_id = #{userId} and u.tenant_id = #{enterpriseId} and r.del_flag = 0 and r.tenant_id = #{enterpriseId}
	</select>

	<select id="selectDeriveRoleByEnterpriseId" parameterType="SysRole" resultType="long">
		select r.role_id
		from sys_role r
		WHERE r.type = #{type} and r.derive_id = #{deriveId} and r.del_flag = 0 and r.tenant_id = #{enterpriseId}
	</select>

	<select id="selectRoleAll" parameterType="SysRole" resultMap="SysRoleResult">
		<include refid="selectAllVo"/>
		WHERE r.status = '0' and r.type = '0'
		<!-- 数据范围过滤 -->
		${params.dataScope}
	</select>

	<select id="selectRolesByUserName" parameterType="SysRole" resultMap="SysRoleResult">
		<include refid="selectVo"/>
		WHERE u.user_name = #{params.userName} and u.del_flag = 0 and r.del_flag = 0
		<!-- 数据范围过滤 -->
		${params.dataScope}
	</select>

	<select id="selectRoleList" parameterType="SysRole" resultMap="SysRoleResult">
		<include refid="selectVo"/>
		where r.type = '0'
		<if test="roleCode != null and roleCode != ''">
			AND r.role_code like concat('%', #{roleCode}, '%')
		</if>
		<if test="name != null and name != ''">
			AND r.name like concat('%', #{name}, '%')
		</if>
		<if test="status != null and status != ''">
			AND r.status = #{status}
		</if>
		<if test="roleKey != null and roleKey != ''">
			AND r.role_key like concat('%', #{roleKey}, '%')
		</if>
		<if test="params.beginTime != null and params.beginTime != ''"><!-- 开始时间检索 -->
			and date_format(r.create_time,'%y%m%d') &gt;= date_format(#{params.beginTime},'%y%m%d')
		</if>
		<if test="params.endTime != null and params.endTime != ''"><!-- 结束时间检索 -->
			and date_format(r.create_time,'%y%m%d') &lt;= date_format(#{params.endTime},'%y%m%d')
		</if>
		<!-- 数据范围过滤 -->
		${params.dataScope}
		order by r.sort
	</select>

	<select id="selectRoleById" parameterType="SysRole" resultMap="SysRoleResult">
		<include refid="selectVo"/>
		where r.role_id = #{roleId}
		<!-- 数据范围过滤 -->
		${params.updateScope}
	</select>

	<insert id="insertRole" parameterType="SysRole">
		insert into sys_role
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="snowflakeId != null">							    role_id					        ,</if>
			<if test="roleCode != null and roleCode != ''">				role_code				        ,</if>
			<if test="name != null and name != ''">						name				        	,</if>
			<if test="roleKey != null and roleKey != ''">				role_key				        ,</if>
			<if test="dataScope != null and dataScope != ''">			data_scope				        ,</if>
			<if test="type != null and type != ''">						type					        ,</if>
			<if test="deriveId != null">								derive_id					    ,</if>
			<if test="sort != null">									sort					        ,</if>
			<if test="status != null and status != ''">					status					        ,</if>
			<if test="createBy != null">								create_by				        ,</if>
			<if test="remark != null and remark != ''">					remark					        ,</if>
			<if test="enterpriseId != null">							tenant_id				        ,</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="snowflakeId != null">							    #{snowflakeId}					,</if>
			<if test="roleCode != null and roleCode != ''">				#{roleCode}				        ,</if>
			<if test="name != null and name != ''">						#{name}				        	,</if>
			<if test="roleKey != null and roleKey != ''">				#{roleKey}				        ,</if>
			<if test="dataScope != null and dataScope != ''">			#{dataScope}			        ,</if>
			<if test="type != null and type != ''">						#{type}					        ,</if>
			<if test="deriveId != null">								#{deriveId}					    ,</if>
			<if test="sort != null">									#{sort}					        ,</if>
			<if test="status != null and status != ''">					#{status}				        ,</if>
			<if test="createBy != null">								#{createBy}				        ,</if>
			<if test="remark != null and remark != ''">					#{remark}				        ,</if>
			<if test="enterpriseId != null">							#{enterpriseId}			        ,</if>
		</trim>
	</insert>

	<update id="updateRole" parameterType="SysRole">
		update sys_role
		<trim prefix="SET" suffixOverrides=",">
			<if test="roleCode != null and roleCode != ''">							role_code = #{roleCode}						,</if>
			<if test="name != null and name != ''">									name = #{name}								,</if>
			<if test="roleKey != null and roleKey != ''">							role_key = #{roleKey}						,</if>
			<if test="dataScope != null and dataScope != ''">						data_scope = #{dataScope}					,</if>
			<if test="sort != null">												sort = #{sort}								,</if>
			<if test="status != null and status != ''">								status = #{status}							,</if>
			<if test="updateBy != null">											update_by = #{updateBy}						,</if>
			<if test="remark != null">												remark = #{remark}							,</if>
		</trim>
		where role_id = #{roleId}
		<!-- 数据范围过滤 -->
		${params.updateScope}
	</update>

	<update id="updateRoleStatus" parameterType="SysRole">
		update sys_role
		<trim prefix="SET" suffixOverrides=",">
			<if test="status != null and status != ''">				status = #{status}						,</if>
		</trim>
		where role_id = #{roleId}
		<!-- 数据范围过滤 -->
		${params.updateScope}
	</update>

	<update id="updateRoleDataScope" parameterType="SysRole">
		update sys_role
		<trim prefix="SET" suffixOverrides=",">
			<if test="dataScope != null and dataScope != ''">			data_scope = #{dataScope}			,</if>
		</trim>
		where role_id = #{roleId}
		<!-- 数据范围过滤 -->
		${params.updateScope}
	</update>

	<delete id="deleteRoleByDeriveId" parameterType="SysRole">
		update sys_role
		set del_flag = 1
		where type = #{type} and derive_id = #{deriveId}
		<!-- 数据范围过滤 -->
		${params.updateScope}
	</delete>

	<delete id="deleteRoleByDeriveIds" parameterType="SysRole">
		update sys_role
		set del_flag = 1
		where type = #{type} and derive_id in
		<foreach item="deriveId" collection="params.Ids" open="(" separator="," close=")">
			#{deriveId}
		</foreach>
		<!-- 数据范围过滤 -->
		${params.updateScope}
	</delete>

	<delete id="deleteRoleByIds" parameterType="SysRole">
		update sys_role
		set del_flag = 1
		where role_id in
		<foreach item="roleId" collection="params.Ids" open="(" separator="," close=")">
			#{roleId}
		</foreach>
		<!-- 数据范围过滤 -->
		${params.updateScope}
	</delete>

	<select id="checkRoleListByIds" parameterType="SysRole" resultMap="SysRoleResult">
		<include refid="selectVo"/>
		where role_id in
		<foreach item="roleId" collection="params.Ids" open="(" separator="," close=")">
			#{roleId}
		</foreach>
		<!-- 数据范围过滤 -->
		${params.dataScope}
	</select>

	<select id="checkRoleCodeUnique" parameterType="SysRole" resultMap="SysRoleResult">
		<include refid="checkVo"/>
		where r.role_key=#{roleCode}
		<!-- 数据范围过滤 -->
		${params.dataScope}
		limit 1
	</select>

	<select id="checkRoleNameUnique" parameterType="SysRole" resultMap="SysRoleResult">
		<include refid="checkVo"/>
		where r.name=#{name}
		<!-- 数据范围过滤 -->
		${params.dataScope}
		limit 1
	</select>

	<select id="checkRoleKeyUnique" parameterType="SysRole" resultMap="SysRoleResult">
		<include refid="checkVo"/>
		where r.role_key=#{roleKey}
		<!-- 数据范围过滤 -->
		${params.dataScope}
		limit 1
	</select>

	<select id="selectRoleIdByDeriveId" parameterType="SysRole" resultMap="SysRoleResult">
		<include refid="scopeVo"/>
		where r.type = #{type} and <choose><when test="deriveId != null">r.derive_id = #{deriveId}</when><otherwise>r.derive_id is null</otherwise></choose>  and r.tenant_id = #{enterpriseId} and r.del_flag = 0
	</select>
</mapper>
