<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xueyi.tenant.mapper.StrategyMapper">

    <resultMap type="Strategy" id="StrategyResult">
        <id     property="strategyId"           column="strategy_id"            />
        <result property="name"                 column="name"                   />
        <result property="tenantAmount"         column="tenant_amount"          />
        <result property="sourceAmount"         column="source_amount"          />
        <result property="isChange"             column="is_change"              />
        <result property="sort"                 column="sort"                   />
        <result property="status"               column="status"                 />
        <result property="createBy"   		    column="create_by"              />
        <result property="createName"   	    column="create_name"            />
        <result property="createTime"           column="create_time"            />
        <result property="updateBy"   		    column="update_by"              />
        <result property="updateName"   	    column="update_name"            />
        <result property="updateTime"           column="update_time"            />
        <collection property="values" javaType="java.util.List" resultMap="valuesResult" />
    </resultMap>

    <resultMap type="Source" id="valuesResult">
        <id     property="sourceId"             column="sub_source_id"          />
        <result property="name"                 column="sub_name"               />
        <result property="isMain"               column="is_main"                />
        <result property="slave"                column="sub_slave"              />
        <result property="status"               column="sub_status"             />
    </resultMap>


    <sql id="selectVo">
        select e.strategy_id, e.name, e.tenant_amount, e.source_amount, e.is_change, e.sort, e.status, e.create_by, e.create_time, e.update_by, e.update_time
        from xy_tenant_strategy e
    </sql>

    <sql id="subVo">
        select e.strategy_id, e.name, e.tenant_amount, e.source_amount, e.is_change, e.sort, e.status, e.create_by, e.create_time, e.update_by, e.update_time,
               b.source_id as sub_source_id, b.name as sub_name, tss.is_main as is_main, b.slave as sub_slave, b.status as sub_status
        from xy_tenant_strategy e
        left join xy_tenant_strategy_source tss on tss.strategy_id = e.strategy_id
        left join xy_tenant_source b on b.source_id = tss.source_id
    </sql>

    <select id="mainSelectStrategyList" parameterType="Strategy" resultMap="StrategyResult">
        <include refid="subVo"/>
        where e.del_flag = 0 and ( b.source_id is null or ( b.source_id is not null and b.del_flag = 0 ) )
        <if test="name != null  and name != ''">and e.name like concat('%', #{name}, '%')</if>
        <if test="status != null  and status != ''">and e.status = #{status}</if>
        order by e.sort
    </select>

    <select id="mainSelectStrategyListExclude" parameterType="Strategy" resultMap="StrategyResult">
        <include refid="selectVo"/>
        where e.status = '0' and e.del_flag = 0
        order by e.sort
    </select>

    <select id="mainSelectStrategyById" parameterType="Strategy" resultMap="StrategyResult">
        <include refid="subVo"/>
        where e.strategy_id = #{strategyId}
        and e.del_flag = 0 and ( b.source_id is null or ( b.source_id is not null and b.del_flag = 0 ) )
    </select>

    <insert id="mainInsertStrategy" parameterType="Strategy">
        insert into xy_tenant_strategy
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="snowflakeId != null">                               strategy_id                          ,</if>
            <if test="name != null and name != ''">                       name                                 ,</if>
            <if test="sourceAmount != null">                              source_amount                        ,</if>
            <if test="sort != null and sort != ''">                       sort                                 ,</if>
            <if test="status != null and status != ''">                   status                               ,</if>
            <if test="createBy != null">                                  create_by                            ,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="snowflakeId != null">                               #{snowflakeId}                       ,</if>
            <if test="name != null and name != ''">                       #{name}                              ,</if>
            <if test="sourceAmount != null">                              #{sourceAmount}                      ,</if>
            <if test="sort != null and sort != ''">                       #{sort}                              ,</if>
            <if test="status != null and status != ''">                   #{status}                            ,</if>
            <if test="createBy != null">                                  #{createBy}                          ,</if>
        </trim>
    </insert>

    <update id="mainUpdateStrategy" parameterType="Strategy">
        update xy_tenant_strategy
        <trim prefix="SET" suffixOverrides=",">
            <if test="name != null and name != ''">                        name = #{name}                      ,</if>
            <if test="sourceAmount != null">                               source_amount = #{sourceAmount}     ,</if>
            <if test="sort != null and sort != ''">                        sort = #{sort}                      ,</if>
            <if test="status != null and status != ''">                    status = #{status}                  ,</if>
            <if test="updateBy != null">                                   update_by = #{updateBy}             ,</if>
        </trim>
        where strategy_id = #{strategyId} and del_flag = 0 and is_change = 'N'
    </update>

    <update id="mainUpdateStrategySort" parameterType="Strategy">
        update xy_tenant_strategy set sort =
        <foreach collection="params.Ids" item="item" index="index" separator=" " open="case strategy_id" close="end">
            when #{item.strategyId} then #{item.sort}
        </foreach>
        where del_flag = 0 and strategy_id in
        <foreach collection="params.Ids" item="item" index="index" separator="," open="(" close=")">
            #{item.strategyId}
        </foreach>
    </update>

    <delete id="mainDeleteStrategyById" parameterType="Strategy">
        update xy_tenant_strategy
        set del_flag = 1
        where strategy_id = #{strategyId}
          and del_flag = 0 and is_change = 'N'
    </delete>

    <delete id="mainDeleteStrategyByIds" parameterType="Strategy">
        update xy_tenant_strategy
        set del_flag = 1
        where del_flag = 0 and is_change = 'N' and strategy_id in
        <foreach item="strategyId" collection="params.Ids" open="(" separator="," close=")">
            #{strategyId}
        </foreach>
    </delete>
    
    <delete id="mainDeleteSourceByStrategyId" parameterType="Strategy">
        delete tsc
        from xy_tenant_strategy_source tsc
        left join xy_tenant_strategy ts on ts.strategy_id = tsc.strategy_id
        where ts.is_change = 'N' and tsc.strategy_id = #{strategyId}
    </delete>

    <delete id="mainDeleteSourceByStrategyIds" parameterType="Strategy">
        delete tsc
        from xy_tenant_strategy_source tsc
        left join xy_tenant_strategy ts on ts.strategy_id = tsc.strategy_id
        where ts.is_change = 'N' and tsc.strategy_id in
        <foreach item="strategyId" collection="params.Ids" open="(" separator="," close=")">
            #{strategyId}
        </foreach>
    </delete>
    
    <insert id="mainBatchSource" parameterType="Strategy">
        insert into xy_tenant_strategy_source(strategy_id, source_id, is_main) values
        <foreach item="item" index="index" collection="values" separator=",">
            ( #{strategyId}, #{item.sourceId}, #{item.isMain})
        </foreach>
    </insert>
</mapper>